// ********RoostGPT********
/*
Test generated by RoostGPT for test aps-java-1 using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getUserInfo_929b640ae0
ROOST_METHOD_SIG_HASH=getUserInfo_b1939473b7

================================VULNERABILITIES================================
Vulnerability: CWE-203: Observable Discrepancy
Issue: Information such as 'Date of Birth' (DOB) is sensitive and could be potentially exploited if it is allowed to leak through errors or observable discrepancies.
Solution: Avoid disclosing sensitive information such as DOB in error messages or log files. Implement access control mechanisms to protect sensitive user details.

Vulnerability: CWE-749: Exposed Dangerous Method or Function
Issue: The getUserInfo method is public and exposes user data. If an attacker has access to the Jwt principal object, they can exploit this method to access other user details.
Solution: Consider proper authorization checks before executing the function's logic. Also, ascertain that only essential data is exposed by the API endpoint.

Vulnerability: CWE-359: Exposure of Private Information ('Privacy Violation')
Issue: The code snippet doesn't include any checks to ensure that it's only the authenticated user who can retrieve their own details. A malicious user can potentially gain access to information about other users.
Solution: Apply suitable authentication and authorization controls around sensitive information. Techniques such as token-based authentication or session management can restrict access to user-specific details.

Vulnerability: CWE-598: Information Exposure Through Query Strings in GET Request
Issue: If the getUserInfo method is tied to a GET request without any security checks, then any sensitive data retrieved could be leaked through browser logs, server logs, or referrer headers.
Solution: Avoid sending sensitive information in GET request. Apply adequate encryption where mandatory and follow secure coding practices.

================================================================================
Scenario 1: Verify getUserInfo with valid Jwt principal

Details:  
  TestName: testGetUserInfoWithValidJwtPrincipal.
  Description: This test scenario is meant to verify that the getUserInfo method correctly retrieves the DOB claim from a given Jwt principal.  
  Execution:
    Arrange: Create a Jwt principal with a DOB claim. 
    Act: Invoke the getUserInfo method with the Jwt principal. 
    Assert: Assert that the returned map contains a single entry with a key of "DOB" and a value equal to the DOB claim in the principal. 
  Validation: 
    This assertion verifies that the getUserInfo method correctly retrieves and returns user claims from Jwt principals. This is significant as it ensures the proper functioning of authentication and authorization processes in the application.

Scenario 2: Verify getUserInfo with Jwt principal having no DOB claim

Details:  
  TestName: testGetUserInfoWithJwtPrincipalWithoutDOB.
  Description: This test scenario is meant to verify the behavior of the getUserInfo method when the Jwt principal does not contain a DOB claim.  
  Execution:
    Arrange: Create a Jwt principal without a DOB claim. 
    Act: Invoke the getUserInfo method with the Jwt principal. 
    Assert: Assert that the returned map contains a single entry with a key of "DOB" and a null value. 
  Validation: 
    This assertion verifies that the getUserInfo method handles Jwt principals missing a DOB claim by returning a map with a null value. This is important for robust error handling and helps to prevent unexpected application behavior.

Scenario 3: Verify getUserInfo with null Jwt principal

Details:  
  TestName: testGetUserInfoWithNullJwtPrincipal.
  Description: This test scenario aims to verify how the getUserInfo method behaves when provided a null Jwt principal.  
  Execution:
    Arrange: No need to arrange data as we're testing with a null Jwt principal. 
    Act: Invoke the getUserInfo method with a null Jwt principal. 
    Assert: Either anticipate an exception or verify that the returned map is empty or has an entry for "DOB" with a null value. 
  Validation: 
    This assertion aims to verify that the getUserInfo method handles null Jwt principals gracefully. This is crucial for ensuring the stability and resilience of the application.
  

Note: These scenarios assume the method behavior from given details about the getUserInfo method. Actual behavior can vary depending on the method implementation within the greater application context.
*/

// ********RoostGPT********
package com.baeldung.jwt.web.controller;

import static org.mockito.Mockito.when;
import org.junit.Before;
import org.junit.Test;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.jwt.Jwt;

import java.util.Map;
import java.util.Collections;

import static org.junit.Assert.assertEquals;

public class CustomUserAttrControllerGetUserInfoTest {

    @AuthenticationPrincipal Jwt principal;

    @Before
    public void setUp() throws Exception {
        principal = Mockito.mock(Jwt.class);
    }

    @Test
    public void testGetUserInfoWithValidJwtPrincipal() {
        when(principal.getClaimAsString("DOB")).thenReturn("2000-01-01");
        
        Map<String, Object> result = getUserInfo(principal);
       
        assertEquals(Collections.singletonMap("DOB", "2000-01-01"), result);
    }

    @Test
    public void testGetUserInfoWithJwtPrincipalWithoutDOB() {
        when(principal.getClaimAsString("DOB")).thenReturn(null);
        
        Map<String, Object> result = getUserInfo(principal);
       
        assertEquals(Collections.singletonMap("DOB", null), result);
    }

    @Test
    public void testGetUserInfoWithNullJwtPrincipal() {
        principal = null;
        
        Map<String, Object> result = getUserInfo(principal);
       
        assertEquals(Collections.singletonMap("DOB", null), result);
    }
}
