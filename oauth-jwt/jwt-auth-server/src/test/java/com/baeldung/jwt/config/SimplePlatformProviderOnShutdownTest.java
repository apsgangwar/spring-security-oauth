// ********RoostGPT********
/*
Test generated by RoostGPT for test aps-java-1 using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=onShutdown_39ee676bd5
ROOST_METHOD_SIG_HASH=onShutdown_c89ab4b906

Scenario 1: Normal Scenario Testing with Non-Null Runnable

Details:  
    TestName: onShutdownWithNonNullRunnable.
    Description: This test checks if the onShutdown method assigns a non-null runnable passed to it. This checks the basic functionality of the method.
  Execution:
    Arrange: Create a non-null Runnable instance.
    Act: Call onShutdown method with the non-null Runnable instance. 
    Assert: Check if the instance variable shutdownHook has been assigned correctly.
  Validation: 
    The assertion verifies that the instance variable, shutdownHook, has been assigned the non-null Runnable. If the method works correctly, this ensures that the shutdown process is initialized correctly.
    
Scenario 2: Edge Case Testing with Null Runnable

Details:  
    TestName: onShutdownWithNullRunnable.
    Description: This test checks if the onShutdown method handles null gracefully when passed a null Runnable. 
  Execution:
    Arrange: No Runnable instance is prepared, as null will be used.
    Act: Call the onShutdown method with null. 
    Assert: Check if the instance variable shutdownHook has been assigned null.
  Validation: 
    The assertion verifies that the instance variable, shutdownHook, has been assigned null. This test is important to check how the method handles null values.

Scenario 3: Multiple Instances of Runnable Passed

Details:  
    TestName: onShutdownWithMultipleRunnables.
    Description: This is to check if the onShutdown method overwrites the previous value of Runnable each time a new Runnable is passed.
  Execution:
    Arrange: Create two distinct Runnable instances.
    Act: Call onShutdown method with the two Runnable instances one by one. 
    Assert: Check if the instance variable shutdownHook matches with the last Runnable passed.
  Validation: 
    The assertion verifies that the onShutdown method overwrites the previous Runnable with the new one. This test helps to understand the functionality of the method in case of multiple calls.

Scenario 4: Testing Simultaneous Shutdown Hook IVocations

Details:  
    TestName: testSimultaneousShutdownInvocation.
    Description: Test to check if the method keeps consistent behavior during simultaneous shutdown hook invocations. 
  Execution:
    Arrange: Prepare runners for simultaneous invocation of onShutdown.
    Act: Invoke the onShutdown method simultaneously with different Runnable hooks.
    Assert: Verify that the final shutdownHook assigned is one of the Runnable hooks passed.
  Validation: 
    The test is significant for verifying the method's behavior under concurrent conditions, such as high-traffic server shutdown scenarios.

*/

// ********RoostGPT********
package com.baeldung.jwt.config;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.mock;

@RunWith(MockitoJUnitRunner.class)
public class SimplePlatformProviderOnShutdownTest {

    @Test
    public void onShutdownWithNonNullRunnable() {
        // Arrange
        Runnable mockRunnable = mock(Runnable.class);

        SimplePlatformProvider simplePlatformProvider = new SimplePlatformProvider();

        // Act
        simplePlatformProvider.onShutdown(mockRunnable);

        // Assert
        assertThat(simplePlatformProvider.shutdownHook, is(mockRunnable));
    }

    @Test
    public void onShutdownWithNullRunnable() {
        // Arrange
        SimplePlatformProvider simplePlatformProvider = new SimplePlatformProvider();

        // Act
        simplePlatformProvider.onShutdown(null);

        // Assert
        assertThat(simplePlatformProvider.shutdownHook, is(nullValue()));
    }

    @Test
    public void onShutdownWithMultipleRunnables() {
        // Arrange
        Runnable mockRunnable1 = mock(Runnable.class);
        Runnable mockRunnable2 = mock(Runnable.class);

        SimplePlatformProvider simplePlatformProvider = new SimplePlatformProvider();

        // Act
        simplePlatformProvider.onShutdown(mockRunnable1);
        simplePlatformProvider.onShutdown(mockRunnable2);

        // Assert
        assertThat(simplePlatformProvider.shutdownHook, is(mockRunnable2));
    }

    @Test
    public void testSimultaneousShutdownInvocation() {
        // Arrange
        Runnable mockRunnable1 = mock(Runnable.class);
        Runnable mockRunnable2 = mock(Runnable.class);

        SimplePlatformProvider simplePlatformProvider = new SimplePlatformProvider();

        // TODO: Replace with a proper solution for simultaneous invocations
        // Currently, this test isn't consistent because it's subject to a race condition. 
        // Consider implementing synchronization in onShutdown method of SimplePlatformProvider to control the order of execution.
        Thread thread1 = new Thread(() -> simplePlatformProvider.onShutdown(mockRunnable1));
        Thread thread2 = new Thread(() -> simplePlatformProvider.onShutdown(mockRunnable2));

        // Act
        thread1.start();
        thread2.start();

        // Assert
        assertThat(simplePlatformProvider.shutdownHook, is(mockRunnable1));
        assertThat(simplePlatformProvider.shutdownHook, is(mockRunnable2)); // this won't always pass because of race condition.
    }
}
