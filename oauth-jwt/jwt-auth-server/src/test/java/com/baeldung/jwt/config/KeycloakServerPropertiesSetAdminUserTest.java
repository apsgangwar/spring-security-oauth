// ********RoostGPT********
/*
Test generated by RoostGPT for test aps-java-1 using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=setAdminUser_c2fd180352
ROOST_METHOD_SIG_HASH=setAdminUser_0e719a4240

================================VULNERABILITIES================================
Vulnerability: CWE-359: Exposure of Private Information ('Privacy Violation')
Issue: The method 'setAdminUser' could potentially be misused to change the identity of the administrative user without proper validation checks. This could lead to exposure of sensitive data.
Solution: Ensure proper access control measures are in place. This includes use of appropriate annotations in Spring Security, like '@PreAuthorize', to restrict method access to authorized users. Also, input validation checks should be used to avoid unwanted changes.

Vulnerability: CWE-200: Information Exposure
Issue: Assignment of the 'adminUser' object directly allows for potential infiltration through object references, leading to unintentional exposure of information.
Solution: Rather than directly assigning the object, create a new instance with the input data. This is defensive copying in Java, which prevents the original object from being modified.

================================================================================
"""
Scenario 1: Setting a Valid Admin User
  Details:  
    TestName: setAdminUserWithValidInput
    Description: This test is meant to check the setAdminUser method when given a valid AdminUser object.
  Execution:
    Arrange: Create a valid AdminUser object.
    Act: Invoke the setAdminUser method with the valid AdminUser object.
    Assert: Verify if the adminUser is set correctly.
  Validation: 
    The assertion aims to verify if the adminUser is set correctly when a valid AdminUser object is passed. The significance of this test lies in ensuring the basic functionality of the setAdminUser method.

Scenario 2: Setting Admin User to Null
  Details:  
    TestName: setAdminUserWithNull
    Description: This test is meant to check the setAdminUser method when given a null value. According to Java conventions, setting a variable to null should not throw an exception.
  Execution:
    Arrange: Set the AdminUser object to null.
    Act: Invoke the setAdminUser method with the null object.
    Assert: Verify if the adminUser is set to null.
  Validation: 
    The assertion aims to verify if the adminUser is set to null without any exceptions. The significance of this test lies in compliance with the Java convention of handling null values.

Scenario 3: Setting Admin User, then Reassigning
  Details:  
    TestName: setAdminUserThenReset
    Description: This test checks if the setAdminUser method can correctly overwrite an existing adminUser with a new one.
  Execution:
    Arrange: Create a valid AdminUser object and then set this as the adminUser.  Then create a second valid AdminUser.
    Act: Invoke the setAdminUser method with the second AdminUser object.
    Assert: Verify if the adminUser is set to the second AdminUser, not the first one.
  Validation: 
    This test verifies if the setAdminUser method correctly overwrites an existing adminUser when given a new one. The relevance of this test is to confirm that the method can update the adminUser correctly.
"""
*/

// ********RoostGPT********
package com.baeldung.jwt.config;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class KeycloakServerPropertiesSetAdminUserTest {

    private KeycloakServerProperties properties;

    @Before
    public void setup() {
        properties = new KeycloakServerProperties();
    }

    @Test
    public void setAdminUserWithValidInput() {
        KeycloakServerProperties.AdminUser adminUser = new KeycloakServerProperties.AdminUser();
        adminUser.setUsername("admin");
        adminUser.setPassword("admin");
        
        properties.setAdminUser(adminUser)
	
        assertEquals("admin", properties.getAdminUser().getUsername());
        assertEquals("admin", properties.getAdminUser().getPassword());
    }

    @Test
    public void setAdminUserWithNull() {
        properties.setAdminUser(null);
        
        assertNull(properties.getAdminUser());
    }

    @Test
    public void setAdminUserThenReset() {
        KeycloakServerProperties.AdminUser firstAdminUser = new KeycloakServerProperties.AdminUser();
        firstAdminUser.setUsername("firstAdmin");
        firstAdminUser.setPassword("firstAdmin");
        
        KeycloakServerProperties.AdminUser secondAdminUser = new KeycloakServerProperties.AdminUser();
        secondAdminUser.setUsername("secondAdmin");
        secondAdminUser.setPassword("secondAdmin");

        properties.setAdminUser(firstAdminUser);
        properties.setAdminUser(secondAdminUser);

        assertEquals("secondAdmin", properties.getAdminUser().getUsername());
        assertEquals("secondAdmin", properties.getAdminUser().getPassword());
    }

}
